version: '2.0'
config:
  store_entities_as_slots: true

session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true

intents:
# Conceptos
  - pregunta_concepto_patron:
      use_entities: true
  - pregunta_concepto_scrum:
      use_entities: true
  - pregunta_concepto_agil:
      use_entities: true
  - pregunta_concepto_fdd:
      use_entities: true
  - pregunta_concepto_template:
      use_entities: true
  - pregunta_concepto_atr_calidad:
      use_entities: true
  - pregunta_concepto_hook:
      use_entities: true
  - pregunta_concepto_req_func:
      use_entities: true
  - pregunta_concepto_req_no_func:
      use_entities: true
  - pregunta_concepto_req_no_func_ejemplo:
      use_entities: true
  - pregunta_concepto_req_func_ejemplo:
      use_entities: true
  - pregunta_diferencia_req_func_no_func:
      use_entities: true
  - pregunta_concepto_patron_listado:
      use_entities: true

  # Patrones especificos
  - pregunta_patron_abstract-factory:
      use_entities: true
  - pregunta_patron_factory-method:
      use_entities: true
  - pregunta_patron_builder:
      use_entities: true
  - pregunta_patron_prototype:
      use_entities: true
  - pregunta_patron_singleton:
      use_entities: true
  - pregunta_patron_adapter:
      use_entities: true
  - pregunta_patron_bridge:
      use_entities: true
  - pregunta_patron_composite:
      use_entities: true
  - pregunta_patron_decorator:
      use_entities: true
  - pregunta_patron_facade:
      use_entities: true
  - pregunta_patron_flyweigth:
      use_entities: true
  - pregunta_patron_proxy:
      use_entities: true
  - pregunta_patron_chain-of-responsibility:
      use_entities: true
  - pregunta_patron_command:
      use_entities: true
  - pregunta_patron_memento:
      use_entities: true
  - pregunta_patron_iterator:
      use_entities: true
  - pregunta_patron_mediator:
      use_entities: true
  - pregunta_patron_observer:
      use_entities: true
  - pregunta_patron_state:
      use_entities: true
  - pregunta_patron_strategy:
      use_entities: true
  - pregunta_patron_template-method:
      use_entities: true
  - pregunta_patron_visitor:
      use_entities: true
  

# Flujo
  - saludo
  - afirmacion
  - negacion
  - despedida
  - gracias
  - entendio
  - no_entendio
  - bien
  - mal
  - aburrido
  - cansado
# Clases marcelo
  - ayuda_transparencia
  - ayuda_presentacion_transparencia
  - concepto_transparencia
  - clase_marcelo
  - concepto_millenial
  - concepto_centennial
  - objetivo_clase_marcelo
# Autoconocimiento
  - wizard_knowledge_ambiguous
  - wizard_knowledge_specific
  - wizard_help_request
  - wizard_name
  - wizard_knowledge_not_specific
  - wizard_challenge_intelligence
  - wizard_challenge_name
  - wizard_creation
  - wizard_birth
  - wizard_year_specific
  - wizard_year_non_specific_older
  - wizard_year_non_specific_younger
  - wizard_genre
  - wizard_parents

entities:
- concepto
- patron

slots: {}

responses:
# Flujo
  utter_saludo:
  - text: 'Hola! Soy DesignWizard. Qué te pinta hacer hoy?'
  
# Conceptos  
  utter_concepto_patron:
  - text: 'Los patrones de diseño (design patterns) son soluciones habituales a problemas comunes en el diseño de software. Cada patrón es como un plano que se puede personalizar para resolver un problema de diseño particular de tu código.'
  utter_concepto_scrum:
  - text: 'La metodología Scrum es un framework que se utiliza dentro de equipos que manejan proyectos complejos. Es decir, se trata de una metodología de trabajo ágil que tiene como finalidad la entrega de valor en períodos cortos de tiempo y para ello se basa en tres pilares: la transparencia, inspección y adaptación.'
  utter_concepto_agil:
  - text: 'Las metodologías ágiles son un conjunto de métodos que permiten adaptar el modo de trabajo a las condiciones del proyecto, aportando flexibilidad, eficiencia y, por lo tanto, logrando un mejor producto a menor coste.'
  utter_concepto_FDD:
  - text: 'Feature-driven development (FDD) es un proceso para desarrollo de software de forma iterativa e incremental\nEl proceso comienza por los requerimientos y el modelado, siguiendo por el diseño y construcción en base a incrementos'
  utter_concepto_template:
  - text: 'Aca va el concepto de template viste'
  utter_concepto_atributo-de-calidad:
  - text: 'Los atributos de calidad (también cualidades del software) son características no funcionales que se consideran deseables en un sistema de software.'
  utter_concepto_hook:
  - text: 'Ponele que te estoy explicando qué es hook'
  utter_concepto_requerimiento-funcional:
  - text: 'Los requerimientos funcionales de un sistema son aquellos que describen cualquier actividad/servicio que éste deba realizar.'
  utter_concepto_requerimiento-funcional_ejemplo:
  - text: 'Un ejemplo de requerimiento funcional, sería:\nEl sistema permitirá a los usuarios autorizados ingresar planes y cronogramas de proyecto'
  - text: 'Por ejemplo,\nEl sistema permitirá el envío automatizado de cartas de entrega de órdenes directamente al almacén.'
  utter_concepto_requerimiento-no-funcional:
  - text: 'Los requerimientos no funcionales representan características generales y restricciones de la aplicación o sistema que se esté desarrollando.'
  - text: 'Se trata de requisitos que no se refieren directamente a las funciones específicas suministradas por el sistema (características de usuario), sino a las propiedades del sistema: rendimiento, seguridad, disponibilidad.'
  utter_concepto_requerimiento-no-funcional_ejemplo:
  - text: 'Por ejemplo,\nTodas las comunicaciones externas entre los servidores de datos, la aplicación y el cliente del sistema deben estar cifradas utilizando el algoritmo RSA.\nes un ejemplo de RNF de Seguridad.'
  utter_mood_bien:
  - text: 'Me alegro boludo'
  utter_ask_more_depth:
  - text: 'Che que parte te complico más?'
  utter_de_nada:
  - text: 'No hay porque salamin'

  # Patrones especificos
  utter_patron_abstract-factory:
  - text: 
  utter_patron_factory-method:
  - text: 
  utter_patron_builder:
  - text: 
  utter_patron_prototype:
  - text: 
  utter_patron_singleton:
  - text: 
  utter_patron_adapter:
  - text: 
  utter_patron_bridge:
  - text: 
  utter_patron_composite:
  - text: 
  utter_patron_decorator:
  - text: 
  utter_patron_facade:
  - text: 
  utter_patron_flyweight:
  - text: 
  utter_patron_proxy:
  - text: 
  utter_patron_chain-of-responsibility:
  - text: 'Chain of Responsibility es un patrón de diseño de comportamiento que te permite pasar solicitudes a lo largo de una cadena de manejadores. Al recibir una solicitud, cada manejador decide si la procesa o si la pasa al siguiente manejador de la cadena.'
  utter_patron_command:
  - text: 
  utter_patron_memento:
  - text: 
  utter_patron_iterator:
  - text: 
  utter_patron_mediator:
  - text: 
  utter_patron_observer:
  - text: 
  utter_patron_state:
  - text: 
  utter_patron_strategy:
  - text: 
  utter_patron_template-method:
  - text: 'Template Method es un patrón de diseño de comportamiento que define el esqueleto de un algoritmo en la superclase pero permite que las subclases sobrescriban pasos del algoritmo sin cambiar su estructura.'
  utter_patron_visitor:
  - text:


# Clases marcelo

# Concimiento wizard

#actions:
#  - action_explain_concept

forms: {}
e2e_actions: []
